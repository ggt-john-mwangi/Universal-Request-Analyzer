// Prisma schema for Universal Request Analyzer
// Save as schema.prisma in the prisma directory

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Request {
  id         Int      @id @default(autoincrement())
  url        String
  method     String
  type       String
  status     Int
  statusText String?
  domain     String
  path       String
  startTime  Float
  endTime    Float
  duration   Float
  size       Int
  timestamp  Float
  tabId      Int
  pageUrl    String
  error      String?
  timings    RequestTiming[]
  headers    RequestHeader[]
  user      User?   @relation(fields: [userId], references: [id])
  userId    Int?
  tenant    Tenant? @relation(fields: [tenantId], references: [id])
  tenantId  Int?
}

model RequestTiming {
  id        Int    @id @default(autoincrement())
  request   Request @relation(fields: [requestId], references: [id])
  requestId Int
  dns       Float
  tcp       Float
  ssl       Float
  ttfb      Float
  download  Float
}

model RequestHeader {
  id        Int    @id @default(autoincrement())
  request   Request @relation(fields: [requestId], references: [id])
  requestId Int
  name      String
  value     String
}

model Tenant {
  id        Int     @id @default(autoincrement())
  name      String
  users     User[]
  requests  Request[]
  createdAt DateTime @default(now())
  roles     Role[]
}

model User {
  id            Int     @id @default(autoincrement())
  email         String  @unique
  password      String
  name          String?
  tenant        Tenant  @relation(fields: [tenantId], references: [id])
  tenantId      Int
  requests      Request[]
  createdAt     DateTime @default(now())
  roles         Role[]   @relation("UserRoles")
  permissions   Permission[] @relation("UserPermissions")
  isSuperAdmin  Boolean  @default(false)
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  users       User[]       @relation("UserRoles")
  permissions Permission[] @relation("RolePermissions")
  tenant      Tenant?      @relation(fields: [tenantId], references: [id])
  tenantId    Int?
  // If tenantId is null, this is a global/system role (e.g., SuperAdmin)
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       User[]   @relation("UserPermissions")
  roles       Role[]   @relation("RolePermissions")
}
